{"version":3,"sources":["../../app/index.ts","../../src/index.ts","../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/core/RepoInfo.ts","../../src/realtime/Constants.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/api/Query.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/api/DataSnapshot.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/core/util/ServerValues.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/operation/Operation.ts","../../src/core/util/ImmutableTree.ts","../../src/core/SyncPoint.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/view/View.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/SyncTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/core/Repo.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/api/Reference.ts","../../src/core/util/Tree.ts","../../src/core/Repo_transaction.ts","../../src/core/AuthTokenProvider.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts","../../src/api/error.ts","../../src/context.ts","../../src/serializer.ts","../../src/api/service.ts","../../src/config.ts","../../src/interfaces/internal-message-payload.ts","../../src/util/errors.ts","../../src/util/constants.ts","../../src/helpers/array-base64-translator.ts","../../src/helpers/migrate-old-database.ts","../../src/helpers/idb-manager.ts","../../src/core/api.ts","../../src/core/token-management.ts","../../src/helpers/is-console-message.ts","../../src/controllers/sw-controller.ts","../../src/helpers/externalizePayload.ts","../../src/helpers/sleep.ts","../../src/controllers/window-controller.ts","../../src/helpers/extract-app-config.ts","../../src/services/api_service.ts","../../src/utils/errors.ts","../../src/constants.ts","../../src/utils/console_logger.ts","../../src/services/settings_service.ts","../../src/utils/string_merger.ts","../../src/services/iid_service.ts","../../src/utils/attributes_utils.ts","../../src/services/remote_config_service.ts","../../src/services/initialization_service.ts","../../src/services/transport_service.ts","../../src/services/perf_logger.ts","../../src/utils/metric_utils.ts","../../src/resources/trace.ts","../../src/resources/network_request.ts","../../src/services/oob_resources_service.ts","../../src/controllers/perf.ts","../../src/logger.ts","../../src/helpers.ts","../../src/errors.ts","../../src/get-config.ts","../../src/initialize-ids.ts","../../src/factory.ts","../../src/functions.ts","../../src/client/caching_client.ts","../../src/client/rest_client.ts","../../src/language.ts","../../src/client/remote_config_fetch_client.ts","../../src/value.ts","../../src/remote_config.ts","../../src/storage/storage.ts","../../src/storage/storage_cache.ts","../../src/client/retrying_client.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../src/api/common.ts","../../src/api/create-installation-request.ts","../../src/util/sleep.ts","../../src/helpers/generate-fid.ts","../../src/helpers/buffer-to-base64-url-safe.ts","../../src/util/get-key.ts","../../src/helpers/fid-changed.ts","../../src/helpers/get-installation-entry.ts","../../src/api/generate-auth-token-request.ts","../../src/helpers/refresh-auth-token.ts","../../src/functions/get-token.ts","../../src/api/delete-installation-request.ts","../../src/functions/on-id-change.ts","../../src/functions/get-id.ts","../../src/functions/delete-installation.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/idb/build/idb.js"],"names":["firebase","registerVersion","domStorage_","prefix_","set","key","value","this","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","DOMStorageWrapper","e","MemoryStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","varArgs","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","ValidationPath","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","repo_","cancel","onComplete","validateArgCount","arguments","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","node","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","Index","KEY_INDEX","KeyIndex","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","root","base12","buildPennant","chunkSize","low","high","childTree","buildBalancedTree","namedNode","middle","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","newIndexes","addToIndexes","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Object","defineProperties","MAX","setPriorityMaxNode","json","childData","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","VALUE_INDEX","valueNode","indexPath_","extractChild","snap","aChild","bChild","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","DataSnapshot","forEach","childrenNode","hasChildren","getKey","getRef","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","DataEvent","snapshotNode","eventData","ctx","call","createCancelEvent","CancelEvent","matches","ValueEventRegistration","hasAnyCallback","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","PathIndex","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","Query","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","children","Map","find","size","childKey","has","remember","clear","SparseSnapshotTree","forget","tree","delete","forEachTree","prefixPath","func","emptyChildrenSingleton","fromUser","fromServer","queryId","tagged","User","OperationSource","Server","forServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","AckUserWrite","Empty","fromObject","ImmutableTree","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","ViewCache","CacheNode","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","oldSnap","valueChange","Change","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","viewCache","changes","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","ViewProcessor","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","WriteTreeCompleteChildSource","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","initialViewCache","eventRegistrations_","indexFilter","IndexedFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","concat","generateEventsForChanges_","getInitialEvents","initialChanges","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","View","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","SyncPoint","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","writeTree_","addWrite","CompoundWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","WriteTree","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","SyncTree","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","rootNode_","updateSnapshot","newSnapshotNode","counters_","incrementCounter","amount","deepCopy","getCollection","hashString","collections_","StatsCollection","getOrCreateReporter","creatorFunction","reporters_","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","isMobileCordova","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","StatsManager","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","href","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","forceRefresh","getToken","then","accessToken","Connection","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","clientName","isReactNative","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","forceRestClient","app","authTokenProvider","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","persistentConnection_","search","authOverride","appId","addTokenChangeListener","statsReporter_","StatsReporter","transactionsInit_","infoData_","SnapshotHolder","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","resolvedOnDisconnectTree","resolved","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","changeAccumulator","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","QueryParams","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","LimitedFilter","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Repo","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","TransactionResult","startTransaction","setPriority","thennablePushRef","pushRef","Promise","OnDisconnect","TransactionStatus","childCount","name_","parent_","TreeNode","subTree","pathObj","Tree","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","prototype","transactionQueueTree_","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","app_","authProvider_","auth_","getImmediate","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","repos_","useRestClient_","RepoManager","appName","dbUrl","databaseFromApp","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","FirebaseAuthTokenProvider","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","Component","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","UNAVAILABLE","DATA_LOSS","details","setPrototypeOf","HttpsErrorImpl","messagingProvider","messaging","getAuthToken","getInstanceIdToken","Notification","permission","getContext","instanceIdToken","mapValues","o","encode","valueOf","isFinite","x","decode","regionOrCustomDomain_","fetchImpl","serializer","Serializer","emulatorOrigin","deleteService","contextProvider","ContextProvider","cancelAllRequests","URL","customDomain","region","_url","useFunctionsEmulator","httpsCallable","postJSON","method","millis","timer","_","failAfter","failAfterPromise","race","clearTimeoutWrapper","bodyJSON","codeForHTTPStatus","description","errorJSON","_errorForResponse","responseData","instance","namespaceExports","Functions","Service","registerComponent","regionOrCustomDomain","getProvider","setServiceProps","setMultipleInstances","MessageType","arrayToBase64","uint8Array","Uint8Array","btoa","fromCharCode","base64ToArray","base64String","repeat","rawData","atob","outputArray","charCodeAt","migrateOldDatabase","senderId","indexedDB","databases","db","includes","tokenDetails","oldVersion","objectStoreNames","objectStore","oldDetails","p256dh","endpoint","fcmToken","createTime","subscriptionOptions","swScope","vapidKey","checkTokenDetails","createObjectStore","OBJECT_STORE_NAME","dbPromise","getDbPromise","requestGetToken","firebaseDependencies","getHeaders","getBody","subscribeOptions","fetch","getEndpoint","appConfig","ERROR_FACTORY","create","errorInfo","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","installations","Headers","Accept","apiKey","web","DEFAULT_VAPID_KEY","applicationPubKey","swRegistration","getPushSubscription","pushSubscription","dbGet","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","updateToken","deleteToken","dbRemove","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","dbSet","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","isOnBackgroundMessageUsed","bgMessageHandler","waitUntil","onPush","onSubChange","onNotificationClick","setBackgroundMessageHandler","onBackgroundMessage","nextOrObserver","requestPermission","usePublicVapidKey","useServiceWorker","onTokenRefresh","event","internalPayload","getMessagePayloadInternal","getClientList","debug","TAG","clientList","some","client","visibilityState","startsWith","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","notification","showNotification","wrapInternalPayload","collapseKey","collapse_key","messagePayloadInternal","title","image","propagateNotificationPayload","propagateDataPayload","fcmOptions","link","analyticsLabel","analytics_label","propagateFcmOptions","externalizePayload","stopImmediatePropagation","click_action","getLink","originUrl","getWindowClient","clients","openWindow","ms","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","clientUrl","PUSH_RECEIVED","matchAll","includeUncontrolled","notificationPayloadInternal","actions","maxActions","onMessageCallback","serviceWorker","messageEventListener","stripInternalFields","assign","dataPayload","logEvent","getVapidKey","getSwReg","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","browserErrorMessage","permissionResult","analyticsProvider","message_id","message_name","message_time","message_device_time","apiInstance","windowInstance","ERROR_DESCRIPTION_MAP","ErrorFactory","consoleLogger","INFO","settingsServiceInstance","performance","PerformanceObserver","windowLocation","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","getUrl","mark","measure","measureName","mark1","mark2","getEntriesByType","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","isIndexedDBAvailable","info","setupObserver","entryType","list","getEntries","entry","observe","entryTypes","Api","mergeStrings","part1","part2","sizeDiff","resultArray","iid","VisibilityState","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getAppId","firebaseAppInstance","getProjectId","getApiKey","getFlTransportFullUrl","SettingsService","getIid","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","getServiceWorkerStatus","controller","getVisibilityState","VISIBLE","HIDDEN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","DEFAULT_CONFIGS","getConfig","config","expiryString","expiry","configStringified","parse","getStoredConfig","processConfig","authTokenPromise","installationsService","authTokenVal","getAuthTokenPromise","configEndPoint","Request","Authorization","FIS_AUTH_PREFIX","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","ok","getRemoteConfig","storeConfig","fpr_enabled","fpr_log_source","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","samplingRate","initializationPromise","initializationStatus","getInitializationPromise","removeEventListener","getDocumentReadyComplete","iidPromise","getId","iidVal","getIidPromise","changeInitializationStatus","remainingTries","isTransportSetup","processQueue","timeOffset","staged","log_event","evt","source_extension_json_proto3","event_time_ms","eventTime","flTransportFullUrl","postToFlEndpoint","transportWait","nextRequestWaitMillis","requestOffset","logResponseDetails","responseAction","sendEventsToFl","request_time_ms","client_info","client_type","js_client_info","log_source","dispatchQueueEvents","addToQueue","sendLog","resource","resourceType","transportHandler","logTrace","trace","settingsService","isAuto","sendTraceLog","networkRequest","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","counters","customAttributes","getAttributes","custom_attributes","trace_metric","serializeTrace","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","oobMetrics","traceMeasureName","state","api","randomId","traceStartMark","TRACE_START_MARK_PREFIX","traceStopMark","TRACE_STOP_MARK_PREFIX","traceMeasure","TRACE_MEASURE_PREFIX","calculateTraceMetrics","traceName","stop","startTime","duration","attributes","metrics","incrementMetric","counter","numAsInteger","putMetric","isValidMetricName","customMetricName","providedValue","valueAsInteger","convertMetricValueToInteger","getMetric","putAttribute","attr","isValidName","isValidCustomAttributeName","isValidValue","isValidCustomAttributeValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","Trace","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","paintObject","firstContentfulPaint","createUserTimingTrace","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","logNetworkRequest","transferSize","setupOobResources","fid","setupOobTraces","resources","setupNetworkRequests","measures","setupUserTimingTraces","validateIndexedDBOpenable","GtagCommand","EventName","GTAG_URL","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","correspondingAppId","all","dynamicConfigResults","foundConfig","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","idOrNameOrParams","SET","wrapGtag","wrappedGtag","defaultRetryData","throttleMetadata","intervalMillis","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","fetchDynamicConfig","appFields","appUrl","jsonResponse","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","setAbortableTimeout","isRetriableError","backoffMillis","abort","initializeIds","dynamicConfigPromise","timeoutMillis","AnalyticsAbortSignal","fetchDynamicConfigWithRetry","fidPromise","validateIndexedDB","envIsValid","dynamicConfig","configProperties","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","resetGlobalVars","newGlobalInitDone","newInitializationPromisesMap","newDynamicPromises","getGlobalVars","settings","factory","mismatchedEnvMessages","warnOnBrowserContextMismatch","scriptTags","getElementsByTagName","findGtagScriptOnPage","head","insertScriptTag","dataLayer","getOrCreateDataLayer","eventName","eventParams","gtagFunction","global","setCurrentScreen","screenName","setUserId","setUserProperties","properties","flatProperties","setAnalyticsCollectionEnabled","enabled","storage","storageCache","isCachedDataFresh","cacheMaxAgeMillis","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","getLastSuccessfulFetchTimestampMillis","getLastSuccessfulFetchResponse","lastSuccessfulFetchResponse","eTag","storageOperations","setLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchResponse","firebaseInstallations","sdkVersion","installationId","installationToken","urlBase","FIREBASE_REMOTE_CONFIG_URL_BASE","requestBody","language_code","navigatorLanguage","languages","language","fetchPromise","timeoutPromise","_resolve","errorCode","originalErrorMessage","responseEtag","responseBody","BOOLEAN_TRUTHY_VALUES","_source","_value","asString","asBoolean","asNumber","getSource","_client","_storageCache","_storage","_logger","_isInitializationComplete","fetchTimeoutMillis","minimumFetchIntervalMillis","defaultConfig","setLogLevel","FirebaseLogLevel","DEBUG","SILENT","ERROR","getLastFetchStatus","activate","getActiveConfigEtag","activeConfigEtag","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","abortSignal","RemoteConfigAbortSignal","setLastFetchStatus","lastFetchStatus","FirebaseError","fetchAndActivate","getAll","obj1","obj2","getAllKeys","getActiveConfig","allConfigs","getBoolean","getNumber","getString","activeConfig","Value","toFirebaseError","originalError","target","openDbPromise","onsuccess","onupgradeneeded","keyPath","etag","compositeKey","createCompositeKey","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","attemptFetch","calculateBackoffMillis","registerRemoteConfig","firebaseInstance","Storage","StorageCache","packageName","restClient","RestClient","retryingClient","RetryingClient","cachingClient","CachingClient","remoteConfigInstance","RemoteConfig","_arrayLikeToArray","arr","arr2","_unsupportedIterableToArray","minLen","constructor","isServerError","getInstallationsEndpoint","INSTALLATIONS_API_URL","extractAuthTokenInfoFromResponse","requestStatus","expiresIn","responseExpiresIn","creationTime","getErrorFromResponse","requestName","responseJson","errorData","serverCode","serverMessage","serverStatus","getHeadersWithAuth","refreshToken","append","INTERNAL_AUTH_VERSION","getAuthorizationHeader","retryIfServerError","createInstallationRequest","authVersion","responseValue","registrationStatus","sleep","VALID_FID_PATTERN","generateFid","fidByteArray","crypto","msCrypto","getRandomValues","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","getBroadcastChannel","closeBroadcastChannel","broadcastFidChange","broadcastChannel","BroadcastChannel","upgradeDB","tx","oldValue","updateFn","store","newValue","getInstallationEntry","oldEntry","installationEntry","clearTimedOutRequest","updateOrCreateInstallationEntry","entryWithPromise","onLine","registrationPromiseWithError","registrationPromise","inProgressEntry","registrationTime","registeredInstallationEntry","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","updateInstallationRequest","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getPlatformInfoString","installation","dependencies","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","tokenPromise","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","callbackSet","addCallback","removeCallback","getMissingValueError","valueName","registerInstallations","keyName","extractAppConfig","deleteInstallation","onIdChange","_slicedToArray","Symbol","_arr","_n","_d","_e","_s","_i","done","unsupportedIterableToArray","TypeError","exports","toArray","promisifyRequest","promisifyRequestCall","promisifyCursorRequestCall","Cursor","proxyProperties","ProxyClass","targetProp","prop","defineProperty","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","nativeObject","items","iterateCursor","continue","openDb","upgradeCallback","deleteDb"],"mappings":"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","file":"static/js/11.f9024714.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { name, version } from '../package.json';\n\nfirebase.registerVersion(name, version, 'app');\n\nexport default firebase;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  deleteInstallation,\n  getId,\n  getToken,\n  IdChangeCallbackFn,\n  IdChangeUnsubscribeFn,\n  onIdChange\n} from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseDependencies } from './interfaces/firebase-dependencies';\n\nimport { name, version } from '../package.json';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  instance.INTERNAL.registerComponent(\n    new Component(\n      installationsName,\n      container => {\n        const app = container.getProvider('app').getImmediate();\n\n        // Throws if app isn't configured properly.\n        const appConfig = extractAppConfig(app);\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        const dependencies: FirebaseDependencies = {\n          appConfig,\n          platformLoggerProvider\n        };\n\n        const installations: FirebaseInstallations & FirebaseService = {\n          app,\n          getId: () => getId(dependencies),\n          getToken: (forceRefresh?: boolean) =>\n            getToken(dependencies, forceRefresh),\n          delete: () => deleteInstallation(dependencies),\n          onIdChange: (callback: IdChangeCallbackFn): IdChangeUnsubscribeFn =>\n            onIdChange(dependencies, callback)\n        };\n        return installations;\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function (queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ) {\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function () {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function (\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function (\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function (\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function (\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function (\n  changedPath: Path\n): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function (\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function (\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function (\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function (\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function (path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet, CONSTANTS } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    namespace?: string\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    regionOrCustomDomain?: string\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ServerErrorData;\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG, TAG } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | BgMessageHandler\n    | null\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(3000);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  const staged = [...queue];\n  queue = [];\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<Promise<\n  DynamicConfig | MinimalDynamicConfig\n>> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (eventName, eventParams, options) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.serverCode === 401 || e.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"sourceRoot":""}